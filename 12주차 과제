import warnings
warnings.simplefilter(action='ignore', category=FutureWarning)

import sys
import os
os.environ['KMP_DUPLICATE_LIB_OK'] = 'True' # 맥 사용환경에서 충돌 
import tensorflow as tf
import keras
from keras.datasets import mnist
from keras.models import Sequential
from keras.layers import Dense, Dropout, Flatten
from keras.layers.convolutional import Conv2D, MaxPooling2D
import numpy as np
np.random.seed(7)

import matplotlib.pylab as plt

print('Python version : ', sys.version)
print('TensorFlow version : ', tf.__version__)
print('Keras version : ', keras.__version__)


(X_train, Y_train), (X_dalidation, Y_validation) = mnist.load_data()

plt.figure(figsize=(6, 1))

for i in range(36):
    plt.subplot(3, 12, i+1)
    plt.imshow(X_train[i], cmap="gray")
    plt.axis("off")


img_rows = 28
img_cols = 28

(X_train, Y_train), (X_test, Y_test) = keras.datasets.mnist.load_data()

input_shape = (img_rows, img_cols, 1)

X_train = X_train.reshape(X_train.shape[0], img_rows, img_cols, 1)
X_test = X_test.reshape(X_test.shape[0], img_rows, img_cols, 1)

X_train = X_train.astype('float32') / 255.
X_test = X_test.astype('float32') / 255.

print('X_train shape: ', X_train.shape)
print(X_train.shape[0] , 'train samples')
print(X_test.shape[0], 'test samples')

batch_size = 128
num_classes = 10
epochs = 12

Y_train = keras.utils.to_categorical(Y_train, num_classes)
Y_test = keras.utils.to_categorical(Y_test, num_classes)



model = Sequential()

model.add(Conv2D(32, kernel_size=(5,5), strides=(1,1), padding='same',
                 activation= 'relu',
                 input_shape = input_shape))
model.add(MaxPooling2D(pool_size=(2,2), strides=(2,2)))
model.add(Conv2D(64, (2,2), activation= 'relu', padding= 'same'))
model.add(MaxPooling2D(pool_size=(2,2)))
model.add(Dropout(0.25))
model.add(Flatten())
model.add(Dense(1000, activation='relu'))
model.add(Dropout(0.5))
model.add(Dense(num_classes, activation= 'softmax'))
model.summary()

model.compile(loss='categorical_crossentropy',
              optimizer='adam', metrics=['accuracy'])
hist = model.fit(X_train, Y_train,
                 batch_size=batch_size,
                 epochs=epochs,
                 verbose=1,
                 validation_data=(X_test,Y_test))

score = model.evaluate(X_test, Y_test, verbose=0)
print('Test loss: ', score[0])
print('Test accuracy: ', score[1])

Y_vloss = hist.history['val_loss']
Y_loss = hist.history['loss']
X_len = np.arange(len(Y_loss))

plt.plot(X_len, Y_vloss, marker='.', c="red", label='Testset_loss')
plt.plot(X_len, Y_loss, marker='.', c="blue", label='Trainset_loss')
plt.legend(loc = 'upper right')
plt.grid()
plt.xlabel('epoch')
plt.ylabel('loss')
plt.show()

n = 0
plt.imshow(X_test[n],reshape(28,28),cmap='Greys', interpolation='nearest')
plt.show()
print('The Answer is ', model.predict_classes(X_test,reshape((1,28,28,1))))
